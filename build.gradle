buildscript {
	ext {
		springBootVersion = '1.5.21.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'java-library'
	id 'org.springframework.boot' version '1.5.21.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'org.hidetake.ssh' version "1.1.3"
	id 'application'
	id 'com.sourcemuse.mongo' version '1.0.0'
}

group = 'uk.ac.ebi.subs'
version = '0.12.0-SNAPSHOT'
mainClassName = "uk.ac.ebi.subs.FileUploadServiceApplication"

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

springBoot {
	buildInfo()
	executable = true
}

repositories {
	mavenLocal()
	mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	compile('uk.ac.ebi.subs:subs-repository:2.34.0-SNAPSHOT') {changing = true}
	compile('uk.ac.ebi.subs:subs-messaging:0.7.0-SNAPSHOT')
	compile("uk.ac.ebi.subs:subs-processing-model:2.15.0-SNAPSHOT")

  	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile("org.springframework.boot:spring-boot-starter-amqp")

  	compile('org.bitbucket.b_c:jose4j:0.5.2')
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("de.siegmar:logback-gelf:1.1.0")

	compile 'de.codecentric:spring-boot-admin-starter-client:1.5.7'

	compileOnly 'org.projectlombok:lombok:1.18.10'
	annotationProcessor 'org.projectlombok:lombok:1.18.10'

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

test {
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
	runWithMongoDb = true
}

mongo {
	mongoVersion = "3.4.3"
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

remotes {
    devFUSHH {
        role('dev')
        host = project.hasProperty(project.name + "DevHHDeployTarget") ? getProperty(project.name + "DevHHDeployTarget") : 'localhost'
    }
    testFUSHH1 {
        role('test')
        host = project.hasProperty(project.name + "TestHH1DeployTarget") ? getProperty(project.name + "TestHH1DeployTarget") : 'localhost'
    }
    testFUSHH2 {
        role('test')
        host = project.hasProperty(project.name + "TestHH2DeployTarget") ? getProperty(project.name + "TestHH2DeployTarget") : 'localhost'
    }
    prodFUSHH1 {
        role('prod')
        host = project.hasProperty(project.name + "ProdHH1DeployTarget") ? getProperty(project.name + "ProdHH1DeployTarget") : 'localhost'
    }
    prodFUSHH2 {
        role('prod')
        host = project.hasProperty(project.name + "ProdHH2DeployTarget") ? getProperty(project.name + "ProdHH2DeployTarget") : 'localhost'
    }
    prodFUSHH3 {
        role('prod')
        host = project.hasProperty(project.name + "ProdHH3DeployTarget") ? getProperty(project.name + "ProdHH3DeployTarget") : 'localhost'
    }
}

ssh.settings {
	user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
	ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
	ssh.settings.passphrase = sshPassphrase
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
	doLast {
		def uploadJarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
		File jarDeployDir = new File("/data/$gradle_env/$project.name/jar",uploadJarFileName)
		sshRun(jarDeployDir)
	}
	ssh.settings {
		knownHosts = allowAnyHosts
	}
}

task testSsh(type: SshTask) {
	doLast {
		sshTestRun()
	}
	ssh.settings {
		knownHosts = allowAnyHosts
	}
}

private Object sshRun(File jarDeployFile) {
	def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
	File jarDeployDir = jarDeployFile.getParentFile()
	ssh.run {
		session(remotes.role(gradle_env)) {
			execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
			println "Uploading jar $jar.archivePath.name to $jarDeployDir/$uploadJarFileName  area on $remote"
			put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
			println "creating symbolic link to $jar.archiveName"
			def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
			println result
			println "updating permissions of $jarDeployDir/$jar.archiveName"
			execute "chmod u+x $jarDeployDir/*", ignoreError: false
		}
	}
}

private Object sshTestRun(){
	ssh.run {
		session(remotes.role(gradle_env)){
			println "started ssh session"
		}
	}
}

